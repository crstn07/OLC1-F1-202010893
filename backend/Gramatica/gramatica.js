/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[2,42],$V2=[1,4],$V3=[1,5],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,14],$V9=[1,24],$Va=[1,15],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,23],$Vk=[1,32],$Vl=[1,33],$Vm=[2,5,7,12,15,18,19,20,21,26,27,29,34,35,36,37,38,39,42,44,45,46,49,52,53],$Vn=[2,5,7,12,15,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,44,45,46,49,52,53],$Vo=[2,5,7,8,12,15,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,44,45,46,49,52,53,54,60,61,62,63,64,65,75],$Vp=[1,47],$Vq=[1,54],$Vr=[1,46],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,55],$Vz=[1,61],$VA=[1,64],$VB=[1,65],$VC=[10,11],$VD=[5,18,40,42,44],$VE=[1,94],$VF=[1,80],$VG=[1,79],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[1,91],$VS=[1,92],$VT=[1,93],$VU=[2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,52,53,54,55,56,57,58,59,66,67,68,69,70,71,72,73,74],$VV=[1,100],$VW=[10,11,31,48],$VX=[2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,52,53,54,55,66,67,68,69,70,71,72,73,74],$VY=[2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,52,53,54,55,56,57,59,66,67,68,69,70,71,72,73,74],$VZ=[2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,52,53,72,73,74],$V_=[1,159],$V$=[1,160],$V01=[10,31],$V11=[18,42,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PAR_ABRE":8,"expresion":9,"PAR_CIERRA":10,"PTCOMA":11,"PRINTLN":12,"declaracion_asignacion":13,"if":14,"SWITCH":15,"LLAVE_ABRE":16,"casos":17,"LLAVE_CIERRA":18,"WHILE":19,"DO":20,"FOR":21,"asignacion":22,"statement":23,"break":24,"continue":25,"VOID":26,"IDENTIFICADOR":27,"params":28,"CALL":29,"identificadores":30,"COMA":31,"parametros":32,"tipo":33,"INT":34,"DOUBLE":35,"STRING":36,"CHAR":37,"BOOLEAN":38,"IF":39,"ELSE":40,"caso":41,"CASE":42,"DOSPTS":43,"DEFAULT":44,"BREAK":45,"CONTINUE":46,"declaracion":47,"IGUAL":48,"CONST":49,"incremento":50,"decremento":51,"INCREMENTO":52,"DECREMENTO":53,"MENOS":54,"MAS":55,"POR":56,"DIVISION":57,"POTENCIA":58,"MODULO":59,"ENTERO":60,"DECIMAL":61,"TRUE":62,"FALSE":63,"CADENA":64,"CARACTER":65,"MAYOR":66,"MENOR":67,"MAYORIGUAL":68,"MENORIGUAL":69,"IGUALIGUAL":70,"DIFERENTE":71,"AND":72,"OR":73,"XOR":74,"NOT":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PAR_ABRE",10:"PAR_CIERRA",11:"PTCOMA",12:"PRINTLN",15:"SWITCH",16:"LLAVE_ABRE",18:"LLAVE_CIERRA",19:"WHILE",20:"DO",21:"FOR",26:"VOID",27:"IDENTIFICADOR",29:"CALL",31:"COMA",34:"INT",35:"DOUBLE",36:"STRING",37:"CHAR",38:"BOOLEAN",39:"IF",40:"ELSE",42:"CASE",43:"DOSPTS",44:"DEFAULT",45:"BREAK",46:"CONTINUE",48:"IGUAL",49:"CONST",52:"INCREMENTO",53:"DECREMENTO",54:"MENOS",55:"MAS",56:"POR",57:"DIVISION",58:"POTENCIA",59:"MODULO",60:"ENTERO",61:"DECIMAL",62:"TRUE",63:"FALSE",64:"CADENA",65:"CARACTER",66:"MAYOR",67:"MENOR",68:"MAYORIGUAL",69:"MENORIGUAL",70:"IGUALIGUAL",71:"DIFERENTE",72:"AND",73:"OR",74:"XOR",75:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,1],[6,1],[6,7],[6,7],[6,9],[6,8],[6,1],[6,1],[6,4],[6,6],[6,5],[6,1],[30,3],[30,1],[28,3],[28,2],[32,4],[32,2],[33,1],[33,1],[33,1],[33,1],[33,1],[14,3],[14,5],[14,5],[14,3],[14,5],[14,5],[23,3],[23,2],[17,2],[17,1],[41,4],[41,3],[24,2],[24,0],[25,2],[25,0],[13,1],[13,2],[47,3],[47,5],[47,4],[47,6],[22,3],[22,1],[22,1],[50,2],[50,2],[51,2],[51,2],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instrucciones.nuevoPrint($$[$0-2]); 
break;
case 5:
 this.$ = instrucciones.nuevoPrintln($$[$0-2]); 
break;
case 8:
 this.$ = instrucciones.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 9:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 10:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 11:
 this.$ = instrucciones.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 14:
 this.$ = instrucciones.nuevoMetodo($$[$0-2],$$[$0-1],$$[$0]);
break;
case 15:
 this.$ = instrucciones.ejecutarMetodo($$[$0-4],$$[$0-2]);
break;
case 16:
 this.$ = instrucciones.ejecutarMetodo($$[$0-3],[]);
break;
case 17:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 18:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 19:
this.$=[$$[$0]]
break;
case 20: case 35: case 46: case 65:
 this.$ = $$[$0-1]; 
break;
case 21: case 36:
 this.$ = []; 
break;
case 22:
 $$[$0-3].push({tipo:$$[$0-1],identificador:$$[$0]}); this.$=$$[$0-3]; 
break;
case 23:
 this.$ = [{tipo:$$[$0-1],identificador:$$[$0]}]; 
break;
case 24:
 this.$ = 'INT'; 
break;
case 25:
 this.$ = 'DOUBLE'; 
break;
case 26:
 this.$ = 'STRING'; 
break;
case 27:
 this.$ = 'CHAR'; 
break;
case 28:
 this.$ = 'BOOLEAN'; 
break;
case 29:
 this.$ = instrucciones.nuevoIf($$[$0-1], $$[$0]); 
break;
case 30:
 this.$ = instrucciones.nuevoElseIf($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 31:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 32:
 this.$ = instrucciones.nuevoIf($$[$0-1], [$$[$0]]); 
break;
case 33:
 this.$ = instrucciones.nuevoElseIf($$[$0-3], [$$[$0-2]], $$[$0]); 
break;
case 34:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], [$$[$0-2]], [$$[$0]]); 
break;
case 37:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 38:
 this.$ = instrucciones.nuevoListaCasos($$[$0]);
break;
case 39:
 this.$ = instrucciones.nuevoCaso($$[$0-2],$$[$0]); 
break;
case 40:
 this.$ = instrucciones.nuevoCasoDef($$[$0]); 
break;
case 41:
 this.$ = instrucciones.nuevoBreak()
break;
case 43:
 this.$ = instrucciones.nuevoContinue()
break;
case 45: case 52: case 53: case 83: case 84:
 this.$ = $$[$0]; 
break;
case 47:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-1], $$[$0-2], TIPO_VARIABLE.VARIABLE); 
break;
case 48:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-3], $$[$0-1], $$[$0-4], TIPO_VARIABLE.VARIABLE); 
break;
case 49:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-1], $$[$0-2], TIPO_VARIABLE.CONSTANTE); 
break;
case 50:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-3], $$[$0-1], $$[$0-4], TIPO_VARIABLE.CONSTANTE); 
break;
case 51:
 this.$ = instrucciones.nuevaAsignacion($$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = instrucciones.nuevoIncrementoPost($$[$0-1]);
break;
case 55:
 this.$ = instrucciones.nuevoIncrementoPre($$[$0]);
break;
case 56:
 this.$ = instrucciones.nuevoDecrementoPost($$[$0-1]);
break;
case 57:
 this.$ = instrucciones.nuevoDecrementoPre($$[$0]);
break;
case 58:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 59:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 60:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 61:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 62:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 63:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 64:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 66:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 67:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 68:
 this.$ = instrucciones.nuevoValor(true, TIPO_VALOR.BOOLEAN); 
break;
case 69:
 this.$ = instrucciones.nuevoValor(false, TIPO_VALOR.BOOLEAN); 
break;
case 70:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 71:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 72:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 73:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 74:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 75:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 76:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 77:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 78:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 79:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 80:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 81:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR); 
break;
case 82:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:$V2,12:$V3,13:6,14:7,15:$V4,19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},{1:[3]},{2:$V0,5:[1,34],6:35,7:$V2,12:$V3,13:6,14:7,15:$V4,19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},o($Vm,[2,3]),{8:[1,36]},{8:[1,37]},o($Vn,[2,6]),o($Vn,[2,7]),{8:[1,38]},{8:[1,39]},{16:[1,40]},{8:[1,41]},o($Vn,[2,12]),o($Vn,[2,13]),{27:[1,42]},{27:[1,43]},o($Vn,[2,17]),o($Vo,[2,45]),{11:[1,44]},{8:$Vp,9:45,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{11:[1,58]},{11:[1,59]},{27:$Vz,30:60},{33:62,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf},{48:[1,63],52:$VA,53:$VB},o($VC,[2,52]),o($VC,[2,53]),{27:[2,24]},{27:[2,25]},{27:[2,26]},{27:[2,27]},{27:[2,28]},{27:[1,66]},{27:[1,67]},{1:[2,1]},o($Vm,[2,2]),{8:$Vp,9:68,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:69,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:70,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:71,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{2:$V0,4:72,6:3,7:$V2,12:$V3,13:6,14:7,15:$V4,18:$V1,19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},{13:73,22:18,27:$V9,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},{8:[1,75],28:74},{8:[1,76]},o($Vo,[2,46]),o($VD,$V1,{13:6,14:7,24:12,25:13,47:17,22:18,33:22,50:25,51:26,23:77,6:78,2:$V0,7:$V2,12:$V3,15:$V4,16:$VE,19:$V5,20:$V6,21:$V7,26:$V8,27:$V9,29:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,49:$Vj,52:$Vk,53:$Vl,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT}),{8:$Vp,9:95,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:96,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),o($VU,[2,69]),o($VU,[2,70]),o($VU,[2,71]),o([2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,54,55,56,57,58,59,66,67,68,69,70,71,72,73,74],[2,72],{52:$VA,53:$VB}),{8:$Vp,9:97,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},o($VU,[2,83]),o($VU,[2,84]),o($Vn,[2,41]),o($Vn,[2,43]),{11:[1,98],31:$VV,48:[1,99]},o($VW,[2,19]),{27:$Vz,30:101},{8:$Vp,9:102,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},o($VU,[2,54]),o($VU,[2,56]),o($VU,[2,55]),o($VU,[2,57]),{10:[1,103],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},{10:[1,104],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},{10:[1,105],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},{10:[1,106],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},{2:$V0,6:35,7:$V2,12:$V3,13:6,14:7,15:$V4,18:[1,107],19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},{8:$Vp,9:108,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{16:$VE,23:109},{10:[1,111],32:110,33:112,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf},{10:[1,114],27:$Vz,30:113},o($Vm,[2,29],{40:[1,115]}),o($Vm,[2,32],{40:[1,116]}),{8:$Vp,9:117,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:118,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:119,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:120,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:121,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:122,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:123,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:124,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:125,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:126,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:127,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:128,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:129,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:130,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{8:$Vp,9:131,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{2:$V0,4:132,6:3,7:$V2,12:$V3,13:6,14:7,15:$V4,18:[1,133],19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},o($VU,[2,58]),{10:[1,134],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},o($VU,[2,82]),o($Vo,[2,47]),{8:$Vp,9:135,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{27:[1,136]},{11:[1,137],31:$VV,48:[1,138]},o($VC,[2,51],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT}),{11:[1,139]},{11:[1,140]},{16:[1,141]},{16:[1,142]},{19:[1,143]},{11:[1,144],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},o($Vn,[2,14]),{10:[1,145],31:[1,146]},{16:[2,21]},{27:[1,147]},{10:[1,148],31:$VV},{11:[1,149]},{14:150,16:$VE,23:151,39:$Vg},o($VD,$V1,{13:6,24:12,25:13,47:17,22:18,33:22,50:25,51:26,14:152,6:153,2:$V0,7:$V2,12:$V3,15:$V4,19:$V5,20:$V6,21:$V7,26:$V8,27:$V9,29:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,49:$Vj,52:$Vk,53:$Vl}),o($VX,[2,59],{56:$VH,57:$VI,58:$VJ,59:$VK}),o($VX,[2,60],{56:$VH,57:$VI,58:$VJ,59:$VK}),o($VY,[2,61],{58:$VJ}),o($VY,[2,62],{58:$VJ}),o($VY,[2,63]),o($VY,[2,64],{58:$VJ}),o($VZ,[2,73],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK}),o($VZ,[2,74],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK}),o($VZ,[2,75],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK}),o($VZ,[2,76],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK}),o($VZ,[2,77],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK}),o($VZ,[2,78],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK}),o([2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,52,53,72,73],[2,79],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,74:$VT}),o([2,5,7,10,11,12,15,16,18,19,20,21,26,27,29,34,35,36,37,38,39,40,42,43,44,45,46,49,52,53,73],[2,80],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,74:$VT}),o($VZ,[2,81],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ}),{2:$V0,6:35,7:$V2,12:$V3,13:6,14:7,15:$V4,18:[1,154],19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},o($Vn,[2,36]),o($VU,[2,65]),{11:[1,155],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},o($VW,[2,18]),o($Vo,[2,49]),{8:$Vp,9:156,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},o($Vn,[2,4]),o($Vn,[2,5]),{17:157,41:158,42:$V_,44:$V$},{2:$V0,4:161,6:3,7:$V2,12:$V3,13:6,14:7,15:$V4,18:$V1,19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},{8:[1,162]},{22:163,27:$V9,50:25,51:26,52:$Vk,53:$Vl},{16:[2,20]},{33:164,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf},o($V01,[2,23]),{11:[1,165]},o($Vn,[2,16]),o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,33]),o($Vn,[2,34]),o($Vn,[2,35]),o($Vo,[2,48]),{11:[1,166],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},{18:[1,167],41:168,42:$V_,44:$V$},o($V11,[2,38]),{8:$Vp,9:169,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{43:[1,170]},{2:$V0,6:35,7:$V2,12:$V3,13:6,14:7,15:$V4,18:[1,171],19:$V5,20:$V6,21:$V7,22:18,24:12,25:13,26:$V8,27:$V9,29:$Va,33:22,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,47:17,49:$Vj,50:25,51:26,52:$Vk,53:$Vl},{8:$Vp,9:172,27:$Vq,50:56,51:57,52:$Vk,53:$Vl,54:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,75:$Vy},{10:[1,173]},{27:[1,174]},o($Vn,[2,15]),o($Vo,[2,50]),o($Vn,[2,8]),o($V11,[2,37]),{43:[1,175],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},o($V11,$V1,{6:3,13:6,14:7,24:12,25:13,47:17,22:18,33:22,50:25,51:26,4:176,2:$V0,7:$V2,12:$V3,15:$V4,19:$V5,20:$V6,21:$V7,26:$V8,27:$V9,29:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,49:$Vj,52:$Vk,53:$Vl}),o($Vn,[2,9]),{10:[1,177],54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT},{16:$VE,23:178},o($V01,[2,22]),o($V11,$V1,{6:3,13:6,14:7,24:12,25:13,47:17,22:18,33:22,50:25,51:26,4:179,2:$V0,7:$V2,12:$V3,15:$V4,19:$V5,20:$V6,21:$V7,26:$V8,27:$V9,29:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,49:$Vj,52:$Vk,53:$Vl}),o($V11,[2,40],{13:6,14:7,24:12,25:13,47:17,22:18,33:22,50:25,51:26,6:35,2:$V0,7:$V2,12:$V3,15:$V4,19:$V5,20:$V6,21:$V7,26:$V8,27:$V9,29:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,49:$Vj,52:$Vk,53:$Vl}),{11:[1,180]},o($Vn,[2,11]),o($V11,[2,39],{13:6,14:7,24:12,25:13,47:17,22:18,33:22,50:25,51:26,6:35,2:$V0,7:$V2,12:$V3,15:$V4,19:$V5,20:$V6,21:$V7,26:$V8,27:$V9,29:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,45:$Vh,46:$Vi,49:$Vj,52:$Vk,53:$Vl}),o($Vn,[2,10])],
defaultActions: {27:[2,24],28:[2,25],29:[2,26],30:[2,27],31:[2,28],34:[2,1],111:[2,21],145:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('../interprete/instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('../interprete/instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('../interprete/tablaSimbolos').TIPO_DATO; 
	const TIPO_VARIABLE		= require('../interprete/tablaSimbolos').TIPO_VARIABLE; 
	const instrucciones	    = require('../interprete/instrucciones').instrucciones;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignora espacios en blanco
break;
case 1:// Comentario de l√≠nea
break;
case 2:// Comentario multil√≠nea
break;
case 3:return 34;
break;
case 4:return 35;
break;
case 5:return 38;
break;
case 6:return 36;
break;
case 7:return 37;
break;
case 8:return 62;
break;
case 9:return 63;
break;
case 10:return 7;
break;
case 11:return 12;
break;
case 12:return 39;
break;
case 13:return 40;
break;
case 14:return 21;
break;
case 15:return 15;
break;
case 16:return 42;
break;
case 17:return 44;
break;
case 18:return 20;
break;
case 19:return 19;
break;
case 20:return 45;
break;
case 21:return 46;
break;
case 22:return 'RETURN';
break;
case 23:return 26;
break;
case 24:return 'TYPEOF';
break;
case 25:return 29;
break;
case 26:return 49;
break;
case 27:return 43;
break;
case 28:return 11;
break;
case 29:return 31;
break;
case 30:return 16;
break;
case 31:return 18;
break;
case 32:return 8;
break;
case 33:return 10;
break;
case 34:return 52;
break;
case 35:return 53;
break;
case 36:return 55;
break;
case 37:return 54;
break;
case 38:return 58;
break;
case 39:return 56;
break;
case 40:return 57;
break;
case 41:return 59;
break;
case 42:return 70;
break;
case 43:return 48;
break;
case 44:return 69;
break;
case 45:return 67;
break;
case 46:return 71;
break;
case 47:return 68;
break;
case 48:return 66;
break;
case 49:return 73;
break;
case 50:return 72;
break;
case 51:return 74;
break;
case 52:return 75;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65;
break;
case 55:return 61;
break;
case 56:return 60;
break;
case 57:return 27;
break;
case 58:return 5;
break;
case 59: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:typeof\b)/i,/^(?:call\b)/i,/^(?:const\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'\\''|'([^\']|\\t|\\n|\\\\|\\r|\\")')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}