/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GRAMATICA = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[2,68],$V2=[1,4],$V3=[1,40],$V4=[1,5],$V5=[1,7],$V6=[1,10],$V7=[1,34],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,17],$Vc=[1,18],$Vd=[1,21],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[1,36],$Vo=[1,54],$Vp=[1,55],$Vq=[1,39],$Vr=[1,41],$Vs=[1,42],$Vt=[1,43],$Vu=[1,44],$Vv=[1,45],$Vw=[1,46],$Vx=[1,47],$Vy=[1,48],$Vz=[1,49],$VA=[1,50],$VB=[1,51],$VC=[1,52],$VD=[1,53],$VE=[2,5,7,8,12,14,27,28,30,31,32,33,39,41,46,50,51,52,53,54,55,58,59,60,61,62,64,67,68,70,76,77,78,79,80,81,91,92,93,94,95,96,97],$VF=[69,70,71,72,73,74,75,82,83,84,85,86,87,88,89,90],$VG=[2,102],$VH=[1,65],$VI=[1,64],$VJ=[1,66],$VK=[1,67],$VL=[2,5,7,8,12,14,27,28,30,31,32,33,39,41,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,70,76,77,78,79,80,81,91,92,93,94,95,96,97],$VM=[1,77],$VN=[1,78],$VO=[1,80],$VP=[14,15],$VQ=[1,84],$VR=[1,93],$VS=[1,95],$VT=[1,94],$VU=[1,96],$VV=[1,97],$VW=[1,98],$VX=[1,99],$VY=[1,100],$VZ=[1,101],$V_=[1,102],$V$=[1,103],$V01=[1,104],$V11=[1,105],$V21=[1,106],$V31=[1,107],$V41=[1,108],$V51=[11,45,69,70,71,72,73,74,75,82,83,84,85,86,87,88,89,90],$V61=[2,81],$V71=[2,82],$V81=[2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$V91=[11,17,24],$Va1=[2,42],$Vb1=[1,125],$Vc1=[1,127],$Vd1=[1,132],$Ve1=[10,24],$Vf1=[2,49],$Vg1=[1,141],$Vh1=[11,45],$Vi1=[1,151],$Vj1=[1,152],$Vk1=[5,30,56,58,59],$Vl1=[1,174],$Vm1=[2,88],$Vn1=[1,198],$Vo1=[10,11],$Vp1=[2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$Vq1=[2,90],$Vr1=[2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$Vs1=[2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,76,77,78,79,80,81,88,89,90,91,92,93,94,95,96,97],$Vt1=[2,95],$Vu1=[2,122],$Vv1=[1,257],$Vw1=[1,267],$Vx1=[1,268],$Vy1=[2,126],$Vz1=[30,58,59],$VA1=[16,24],$VB1=[2,123];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PAR_ABRE":8,"expresion":9,"PAR_CIERRA":10,"PTCOMA":11,"PRINTLN":12,"tipo":13,"IDENTIFICADOR":14,"[":15,"]":16,"IGUAL":17,"NEW":18,"vector":19,"PUNTO":20,"PUSH":21,"POP":22,"SPLICE":23,"COMA":24,"declaracion_asignacion":25,"if":26,"SWITCH":27,"LLAVE_ABRE":28,"casos":29,"LLAVE_CIERRA":30,"WHILE":31,"DO":32,"FOR":33,"asignacion":34,"statement":35,"break":36,"continue":37,"return":38,"VOID":39,"params":40,"CALL":41,"parametros_asignar":42,"ternario":43,"instruccion_ternario":44,"DOSPTS":45,"GRAFICAR_TS":46,"valoresVector":47,"identificadores":48,"parametros":49,"INT":50,"DOUBLE":51,"STRING":52,"CHAR":53,"BOOLEAN":54,"IF":55,"ELSE":56,"caso":57,"CASE":58,"DEFAULT":59,"BREAK":60,"CONTINUE":61,"RETURN":62,"declaracion":63,"CONST":64,"incremento":65,"decremento":66,"INCREMENTO":67,"DECREMENTO":68,"INTERROGACION":69,"MENOS":70,"MAS":71,"POR":72,"DIVISION":73,"POTENCIA":74,"MODULO":75,"ENTERO":76,"DECIMAL":77,"TRUE":78,"FALSE":79,"CADENA":80,"CARACTER":81,"MAYOR":82,"MENOR":83,"MAYORIGUAL":84,"MENORIGUAL":85,"IGUALIGUAL":86,"DIFERENTE":87,"AND":88,"OR":89,"XOR":90,"NOT":91,"TYPEOF":92,"TOLOWER":93,"TOUPPER":94,"ROUND":95,"LENGTH":96,"TO_CHAR_ARRAY":97,"INDEXOF":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PAR_ABRE",10:"PAR_CIERRA",11:"PTCOMA",12:"PRINTLN",14:"IDENTIFICADOR",15:"[",16:"]",17:"IGUAL",18:"NEW",20:"PUNTO",21:"PUSH",22:"POP",23:"SPLICE",24:"COMA",27:"SWITCH",28:"LLAVE_ABRE",30:"LLAVE_CIERRA",31:"WHILE",32:"DO",33:"FOR",39:"VOID",41:"CALL",45:"DOSPTS",46:"GRAFICAR_TS",50:"INT",51:"DOUBLE",52:"STRING",53:"CHAR",54:"BOOLEAN",55:"IF",56:"ELSE",58:"CASE",59:"DEFAULT",60:"BREAK",61:"CONTINUE",62:"RETURN",64:"CONST",67:"INCREMENTO",68:"DECREMENTO",69:"INTERROGACION",70:"MENOS",71:"MAS",72:"POR",73:"DIVISION",74:"POTENCIA",75:"MODULO",76:"ENTERO",77:"DECIMAL",78:"TRUE",79:"FALSE",80:"CADENA",81:"CARACTER",82:"MAYOR",83:"MENOR",84:"MAYORIGUAL",85:"MENORIGUAL",86:"IGUALIGUAL",87:"DIFERENTE",88:"AND",89:"OR",90:"XOR",91:"NOT",92:"TYPEOF",93:"TOLOWER",94:"TOUPPER",95:"ROUND",96:"LENGTH",97:"TO_CHAR_ARRAY",98:"INDEXOF"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,16],[6,11],[6,9],[6,7],[6,7],[6,10],[6,7],[6,5],[6,6],[6,9],[6,2],[6,1],[6,7],[6,7],[6,9],[6,9],[6,1],[6,1],[6,1],[6,4],[6,4],[6,6],[6,1],[6,5],[6,1],[6,1],[19,3],[47,3],[47,3],[47,1],[47,1],[44,4],[44,4],[44,1],[44,5],[48,3],[48,1],[40,3],[40,2],[49,4],[49,2],[42,3],[42,1],[42,0],[13,1],[13,1],[13,1],[13,1],[13,1],[26,3],[26,5],[26,5],[26,3],[26,5],[26,5],[35,3],[35,2],[29,2],[29,1],[57,4],[57,3],[36,2],[36,0],[37,2],[37,0],[38,2],[38,3],[38,0],[25,1],[25,1],[63,2],[63,4],[63,3],[63,5],[34,3],[34,1],[34,1],[65,2],[65,2],[66,2],[66,2],[43,2],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,4],[9,1],[9,1],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,7],[9,4],[9,6],[9,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 35: case 36: case 48:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instrucciones.nuevoPrint($$[$0-2]); 
break;
case 5:
 this.$ = instrucciones.nuevoPrintln($$[$0-2]); 
break;
case 6:
 this.$ = instrucciones.nuevoVector($$[$0-15],$$[$0-14],$$[$0-7],$$[$0-5],$$[$0-2]); 
break;
case 7:
 this.$ = instrucciones.nuevoVector($$[$0-10],$$[$0-9],$$[$0-4],$$[$0-2]); 
break;
case 8:
 this.$ = instrucciones.nuevoVector($$[$0-8],$$[$0-7],undefined,$$[$0-1],undefined); 
break;
case 9: case 10:
 this.$ = instrucciones.nuevoVector($$[$0-6],$$[$0-5],undefined,$$[$0-1]); 
break;
case 11:
 this.$ = instrucciones.nuevoModificarVector($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1]); 
break;
case 12:
 this.$ = instrucciones.nuevoModificarVector($$[$0-6],$$[$0-4],undefined,$$[$0-1]); 
break;
case 13:
 this.$ = instrucciones.nuevoPush($$[$0-4],$$[$0-1]); 
break;
case 14:
 this.$ = instrucciones.nuevoPop($$[$0-5]); 
break;
case 15:
 this.$ = instrucciones.nuevoSplice($$[$0-8],$$[$0-4],$$[$0-2]); 
break;
case 18:
 this.$ = instrucciones.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 19:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 20:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 21:
 this.$ = instrucciones.nuevoFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 25:
 this.$ = instrucciones.nuevoMetodo("VOID",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 26:
 this.$ = instrucciones.nuevoMetodo($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 27:
 this.$ = instrucciones.ejecutarMetodo($$[$0-4],$$[$0-2]);
break;
case 28:
 this.$ = instrucciones.nuevoBloque($$[$0]); 
break;
case 29:
 this.$ = instrucciones.nuevoTernarioIns($$[$0-4],[$$[$0-3]],[$$[$0-1]]); 
break;
case 30:
 this.$ = instrucciones.nuevoGraficarTs(); 
break;
case 31:
  console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			listaErrores.push({
				tipo: "SINTACTICO",
				linea: this._$.first_line,
				columna: this._$.first_column,
				mensaje: '>>ERROR SINTACTICO: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column
			});
	
break;
case 32:
 this.$ = $$[$0-1];
break;
case 33: case 34:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 37:
 this.$ = instrucciones.nuevoPrint($$[$0-1]); 
break;
case 38:
 this.$ = instrucciones.nuevoPrintln($$[$0-1]); 
break;
case 39: case 74: case 75: case 81: case 82: case 114: case 115:
 this.$ = $$[$0]; 
break;
case 40: case 116:
 this.$ = instrucciones.ejecutarMetodo($$[$0-3],$$[$0-1]);
break;
case 41:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 42:
this.$=[$$[$0]]
break;
case 43: case 61: case 87: case 95:
 this.$ = $$[$0-1]; 
break;
case 44: case 49: case 62:
 this.$ = []; 
break;
case 45:
 $$[$0-3].push({tipo:$$[$0-1],identificador:$$[$0]}); this.$=$$[$0-3]; 
break;
case 46:
 this.$ = [{tipo:$$[$0-1],identificador:$$[$0]}]; 
break;
case 47:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 50:
 this.$ = 'INT'; 
break;
case 51:
 this.$ = 'DOUBLE'; 
break;
case 52:
 this.$ = 'STRING'; 
break;
case 53:
 this.$ = 'CHAR'; 
break;
case 54:
 this.$ = 'BOOLEAN'; 
break;
case 55:
 this.$ = instrucciones.nuevoIf($$[$0-1], $$[$0]); 
break;
case 56:
 this.$ = instrucciones.nuevoElseIf($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = instrucciones.nuevoIf($$[$0-1], [$$[$0]]); 
break;
case 59:
 this.$ = instrucciones.nuevoElseIf($$[$0-3], [$$[$0-2]], $$[$0]); 
break;
case 60:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], [$$[$0-2]], [$$[$0]]); 
break;
case 63:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 64:
 this.$ = instrucciones.nuevoListaCasos($$[$0]);
break;
case 65:
 this.$ = instrucciones.nuevoCaso($$[$0-2],$$[$0]); 
break;
case 66:
 this.$ = instrucciones.nuevoCasoDef($$[$0]); 
break;
case 67:
 this.$ = instrucciones.nuevoBreak()
break;
case 69:
 this.$ = instrucciones.nuevoContinue()
break;
case 71:
 this.$ = instrucciones.nuevoReturn(); 
break;
case 72:
 this.$ = instrucciones.nuevoReturn($$[$0-1]); 
break;
case 76:
 this.$ = instrucciones.nuevaDeclaracion($$[$0], $$[$0-1], TIPO_VARIABLE.VARIABLE); 
break;
case 77:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-2], $$[$0], $$[$0-3], TIPO_VARIABLE.VARIABLE); 
break;
case 78:
 this.$ = instrucciones.nuevaDeclaracion($$[$0], $$[$0-1], TIPO_VARIABLE.CONSTANTE); 
break;
case 79:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-2], $$[$0], $$[$0-3], TIPO_VARIABLE.CONSTANTE); 
break;
case 80:
 this.$ = instrucciones.nuevaAsignacion($$[$0-2], $$[$0]); 
break;
case 83:
 this.$ = instrucciones.nuevoIncrementoPost($$[$0-1]);
break;
case 84:
 this.$ = instrucciones.nuevoIncrementoPre($$[$0]);
break;
case 85:
 this.$ = instrucciones.nuevoDecrementoPost($$[$0-1]);
break;
case 86:
 this.$ = instrucciones.nuevoDecrementoPre($$[$0]);
break;
case 88:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 89:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 90:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 91:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 92:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 93:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 94:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 96:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 97:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 98:
 this.$ = instrucciones.nuevoValor(true, TIPO_VALOR.BOOLEAN); 
break;
case 99:
 this.$ = instrucciones.nuevoValor(false, TIPO_VALOR.BOOLEAN); 
break;
case 100:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 101:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 102:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 103:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 104:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 105:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 106:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 107:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 108:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 109:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 110:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 111:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR); 
break;
case 112:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 113:
 this.$ = instrucciones.nuevoTypeof($$[$0-1]); 
break;
case 117:
 this.$ = instrucciones.nuevoTernarioExp($$[$0-3],$$[$0-2],$$[$0]); 
break;
case 118:
 this.$ = instrucciones.nuevoToLower($$[$0-1]); 
break;
case 119:
 this.$ = instrucciones.nuevoToUpper($$[$0-1]); 
break;
case 120:
 this.$ = instrucciones.nuevoRound($$[$0-1]); 
break;
case 121:
 this.$ = instrucciones.nuevoLength($$[$0-1]); 
break;
case 122:
 this.$ = instrucciones.nuevoAccesoVector($$[$0-3],$$[$0-1]); 
break;
case 123:
 this.$ = instrucciones.nuevoAccesoVector($$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 124:
 this.$ = instrucciones.nuevoToCharArray($$[$0-1]); 
break;
case 125:
 this.$ = instrucciones.nuevoIndexOf($$[$0-5],$$[$0-1]); 
break;
case 126:
 this.$ = instrucciones.nuevoPush($$[$0-5],$$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{1:[3]},{2:$V0,5:[1,56],6:57,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VE,[2,3]),{8:[1,58]},{8:[1,59]},{14:[1,60],48:61},o($VF,$VG,{8:$VH,15:[1,62],17:$VI,20:[1,63],67:$VJ,68:$VK}),{11:[1,68]},o($VL,[2,17]),{8:[1,69]},{8:[1,70]},{28:[1,71]},{8:[1,72]},o($VL,[2,22]),o($VL,[2,23]),o($VL,[2,24]),{14:[1,73]},{14:[1,74]},o($VL,[2,28]),{7:$VM,8:$V3,9:76,12:$VN,14:[1,81],34:79,41:$VO,43:82,44:75,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VL,[2,30]),o($VL,[2,31]),o($VP,[2,50]),o($VP,[2,51]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54]),{11:[2,74]},{11:[2,75]},{8:$V3,9:83,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{11:[1,87]},{11:[1,88]},{8:$V3,9:90,11:[1,89],14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{2:$V0,4:91,6:3,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,30:[1,92],31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{13:109,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi},o($V51,$V61),o($V51,$V71),{8:$V3,9:110,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:111,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($V81,[2,96]),o($V81,[2,97]),o($V81,[2,98]),o($V81,[2,99]),o($V81,[2,100]),o($V81,[2,101]),{8:$V3,9:112,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:[1,113]},{8:[1,114]},{8:[1,115]},{8:[1,116]},{8:[1,117]},{8:[1,118]},{14:[1,119]},{14:[1,120]},{1:[2,1]},o($VE,[2,2]),{8:$V3,9:121,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:122,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($V91,$Va1,{40:124,8:$Vb1,15:[1,123]}),{11:[2,76],17:[1,126],24:$Vc1},{8:$V3,9:128,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{21:[1,129],22:[1,130],23:[1,131],98:$Vd1},{8:$V3,9:133,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($Ve1,$Vf1,{43:82,65:85,66:86,42:134,9:135,8:$V3,14:$VQ,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),o($V81,[2,83]),o($V81,[2,85]),o($VL,[2,16]),{8:$V3,9:136,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:137,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{2:$V0,4:138,6:3,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,30:$V1,31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{13:140,14:$Vg1,25:139,34:29,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,63:28,64:$Vn,65:142,66:143,67:$Vo,68:$Vp},{8:$Vb1,40:144},{8:[1,145]},{45:[1,146]},{45:[1,147],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{8:[1,148]},{8:[1,149]},o($Vh1,[2,39]),{14:[1,150]},o([45,69,70,71,72,73,74,75,82,83,84,85,86,87,88,89,90],$VG,{8:$VH,15:$Vi1,17:$VI,20:$Vj1,67:$VJ,68:$VK}),{8:$V3,9:76,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($Vk1,$V1,{13:6,25:8,26:9,36:14,37:15,38:16,43:20,63:28,34:29,9:35,65:37,66:38,35:153,6:154,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,39:$Vb,41:$Vc,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,67:$Vo,68:$Vp,69:$VR,70:[1,155],71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),o([2,5,7,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VG,{8:$VH,15:$Vi1,20:$Vj1,67:$VJ,68:$VK}),o($V81,[2,114]),o($V81,[2,115]),o($VL,[2,67]),o($VL,[2,69]),o($VL,[2,71]),{11:[1,156],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{2:$V0,6:57,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,30:[1,157],31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VL,[2,62]),o([7,8,12,14,41,67,68,70,76,77,78,79,80,81,91,92,93,94,95,96,97],[2,87]),{8:$V3,9:158,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:159,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:160,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:161,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:162,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:163,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:164,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:165,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:166,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:167,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:168,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:169,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:170,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:171,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:172,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{14:$Vl1,48:173},o($V81,$Vm1),{10:[1,175],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($V81,[2,112]),{8:$V3,9:176,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:177,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:178,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:179,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:180,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:181,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($V81,[2,84]),o($V81,[2,86]),{10:[1,182],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,183],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{16:[1,184]},{28:$V7,35:185},{10:[1,187],13:188,49:186,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi},{8:$V3,9:189,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{14:[1,190]},{16:[1,191],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{8:[1,193],9:192,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:[1,194]},{8:[1,195]},{8:[1,196]},o([10,11,45],[2,80],{69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41}),{10:[1,197],24:$Vn1},o($Ve1,[2,48],{69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41}),{10:[1,199],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,200],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{2:$V0,6:57,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,30:[1,201],31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{11:[1,202]},{14:$Vl1,48:61},{17:$VI,67:$VJ,68:$VK},o($Vo1,$V61),o($Vo1,$V71),{28:$V7,35:203},o($Ve1,$Vf1,{43:82,65:85,66:86,9:135,42:204,8:$V3,14:$VQ,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),{7:$VM,12:$VN,14:$Vg1,34:79,41:$VO,44:205,65:142,66:143,67:$Vo,68:$Vp},{8:$V3,9:206,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:207,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:208,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:[1,209]},{8:$V3,9:210,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{21:[1,211],98:$Vd1},o($VE,[2,55],{56:[1,212]}),o($VE,[2,58],{56:[1,213]}),{8:$V3,9:214,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VL,[2,72]),o($VL,[2,61]),o($Vp1,[2,89],{72:$VU,73:$VV,74:$VW,75:$VX}),o($Vp1,$Vq1,{72:$VU,73:$VV,74:$VW,75:$VX}),o($Vr1,[2,91],{74:$VW}),o($Vr1,[2,92],{74:$VW}),o($Vr1,[2,93]),o($Vr1,[2,94],{74:$VW}),o($Vs1,[2,103],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX}),o($Vs1,[2,104],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX}),o($Vs1,[2,105],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX}),o($Vs1,[2,106],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX}),o($Vs1,[2,107],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX}),o($Vs1,[2,108],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX}),o([2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,76,77,78,79,80,81,88,89,91,92,93,94,95,96,97],[2,109],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,90:$V41}),o([2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,76,77,78,79,80,81,89,91,92,93,94,95,96,97],[2,110],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,90:$V41}),o($Vs1,[2,111],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11}),{11:[2,78],17:[1,215],24:$Vc1},o($V91,$Va1),o($V81,$Vt1),{10:[1,216],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,217],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,218],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,219],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,220],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,221],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{11:[1,222]},{11:[1,223]},{15:[1,224],17:[1,225]},o($VL,[2,26]),{10:[1,226],24:[1,227]},{28:[2,44]},{14:[1,228]},{11:[2,77],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($V91,[2,41]),o($VF,$Vu1,{15:[1,229],17:[1,230]}),{11:[1,231],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{8:$V3,9:232,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{10:[1,233]},{8:$V3,9:234,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:235,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($V81,[2,116]),{8:$V3,9:236,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{28:[1,237]},{28:[1,238]},{31:[1,239]},{8:$V3,9:240,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VL,[2,25]),{10:[1,241],24:$Vn1},{11:[1,242]},o([2,5,7,8,10,11,12,14,16,24,27,28,30,31,32,33,39,41,45,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,76,77,78,79,80,81,91,92,93,94,95,96,97],[2,117],{70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41}),{10:[1,243],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,244],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($Ve1,$Vf1,{43:82,65:85,66:86,9:135,42:245,8:$V3,14:$VQ,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),{16:[1,246],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{8:[1,247]},{26:248,28:$V7,35:249,55:$Vj},o($Vk1,$V1,{13:6,25:8,36:14,37:15,38:16,35:19,43:20,63:28,34:29,9:35,65:37,66:38,26:250,6:251,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,39:$Vb,41:$Vc,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),o([2,5,7,8,12,14,27,28,30,31,32,33,39,41,46,50,51,52,53,54,55,56,58,59,60,61,62,64,67,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$Vq1,{72:$Vm1,73:$Vm1,74:$Vm1,75:$Vm1}),{8:$V3,9:252,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($V81,[2,113]),o($V81,[2,118]),o($V81,[2,119]),o($V81,[2,120]),o($V81,[2,121]),o($V81,[2,124]),o($VL,[2,4]),o($VL,[2,5]),{16:[1,253]},{8:$V3,9:256,14:$VQ,15:$Vv1,18:[1,254],19:255,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{28:[2,43]},{13:258,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi},o($Ve1,[2,46]),{8:$V3,9:259,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:260,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VL,[2,13]),{10:[1,261],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{11:[1,262]},{24:[1,263],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,264],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($Ve1,[2,47],{69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41}),{29:265,57:266,58:$Vw1,59:$Vx1},{2:$V0,4:269,6:3,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,30:$V1,31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:[1,270]},{11:[1,271],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{11:[1,272]},o($VL,[2,29]),o($Vh1,[2,37]),o($Vh1,[2,38]),{10:[1,273],24:$Vn1},o($V81,$Vu1,{15:[1,274]}),{8:$V3,9:275,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,59]),o($VL,[2,60]),{11:[2,79],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{17:[1,276]},{13:277,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi},{11:[1,278]},{11:[1,279],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{8:$V3,9:281,14:$VQ,15:$Vv1,19:282,43:82,47:280,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{14:[1,283]},{16:[1,284],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{11:[1,285],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($VF,$Vy1,{11:$Vt1}),o($VL,[2,14]),{8:$V3,9:286,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o($V81,[2,125]),{30:[1,287],57:288,58:$Vw1,59:$Vx1},o($Vz1,[2,64]),{8:$V3,9:289,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{45:[1,290]},{2:$V0,6:57,7:$V2,8:$V3,9:35,12:$V4,13:6,14:$V5,25:8,26:9,27:$V6,28:$V7,30:[1,291],31:$V8,32:$V9,33:$Va,34:29,35:19,36:14,37:15,38:16,39:$Vb,41:$Vc,43:20,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,63:28,64:$Vn,65:37,66:38,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:292,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{14:$Vg1,34:293,65:142,66:143,67:$Vo,68:$Vp},o($VL,[2,27]),o($Vh1,[2,40]),{8:$V3,9:294,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{10:[1,295],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{15:$Vv1,18:[1,296],19:297},{15:[1,298]},o($VL,[2,9]),o($VL,[2,10]),{16:[1,299],24:[1,300]},o($VA1,[2,35],{69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41}),o($VA1,[2,36]),o($Ve1,[2,45]),o($VF,$VB1,{17:[1,301]}),o($VL,[2,12]),{10:[1,302],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($VL,[2,18]),o($Vz1,[2,63]),{45:[1,303],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($Vz1,$V1,{6:3,13:6,25:8,26:9,36:14,37:15,38:16,35:19,43:20,63:28,34:29,9:35,65:37,66:38,4:304,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,39:$Vb,41:$Vc,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),o($VL,[2,19]),{10:[1,305],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{10:[1,306]},{16:[1,307],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($V81,$Vy1),{13:308,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi},{11:[1,309]},{8:$V3,9:310,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},o([11,16,24],[2,32]),{8:$V3,9:311,14:$VQ,15:$Vv1,19:312,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{8:$V3,9:313,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{11:[1,314]},o($Vz1,$V1,{6:3,13:6,25:8,26:9,36:14,37:15,38:16,35:19,43:20,63:28,34:29,9:35,65:37,66:38,4:315,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,39:$Vb,41:$Vc,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),o($Vz1,[2,66],{13:6,25:8,26:9,36:14,37:15,38:16,35:19,43:20,63:28,34:29,9:35,65:37,66:38,6:57,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,39:$Vb,41:$Vc,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),{11:[1,316]},{28:$V7,35:317},o($V81,$VB1),{15:[1,318]},o($VL,[2,8]),{16:[1,319],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($VA1,[2,33],{69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41}),o($VA1,[2,34]),{11:[1,320],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($VL,[2,15]),o($Vz1,[2,65],{13:6,25:8,26:9,36:14,37:15,38:16,35:19,43:20,63:28,34:29,9:35,65:37,66:38,6:57,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,27:$V6,28:$V7,31:$V8,32:$V9,33:$Va,39:$Vb,41:$Vc,46:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD}),o($VL,[2,20]),o($VL,[2,21]),{8:$V3,9:321,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{11:[1,322]},o($VL,[2,11]),{16:[1,323],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},o($VL,[2,7]),{15:[1,324]},{8:$V3,9:325,14:$VQ,43:82,65:85,66:86,67:$Vo,68:$Vp,70:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD},{16:[1,326],69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,88:$V21,89:$V31,90:$V41},{11:[1,327]},o($VL,[2,6])],
defaultActions: {28:[2,74],29:[2,75],56:[2,1],187:[2,44],226:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('../interprete/instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('../interprete/instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('../interprete/tablaSimbolos').TIPO_DATO; 
	const TIPO_VARIABLE		= require('../interprete/tablaSimbolos').TIPO_VARIABLE; 
	const instrucciones	    = require('../interprete/instrucciones').instrucciones;
	var listaErrores 		= require('../interprete/instrucciones').listaErrores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignora espacios en blanco
break;
case 1:// Comentario de línea
break;
case 2:// Comentario multilínea
break;
case 3:return 50;
break;
case 4:return 51;
break;
case 5:return 54;
break;
case 6:return 52;
break;
case 7:return 53;
break;
case 8:return 78;
break;
case 9:return 79;
break;
case 10:return 7;
break;
case 11:return 12;
break;
case 12:return 55;
break;
case 13:return 56;
break;
case 14:return 33;
break;
case 15:return 27;
break;
case 16:return 58;
break;
case 17:return 59;
break;
case 18:return 32;
break;
case 19:return 31;
break;
case 20:return 60;
break;
case 21:return 61;
break;
case 22:return 62;
break;
case 23:return 39;
break;
case 24:return 92;
break;
case 25:return 41;
break;
case 26:return 64;
break;
case 27:return 93;
break;
case 28:return 94;
break;
case 29:return 95;
break;
case 30:return 96;
break;
case 31:return 18;
break;
case 32:return 97;
break;
case 33:return 98;
break;
case 34:return 21;
break;
case 35:return 22;
break;
case 36:return 23;
break;
case 37:return 46;
break;
case 38:return 20;
break;
case 39:return 45;
break;
case 40:return 11;
break;
case 41:return 24;
break;
case 42:return 28;
break;
case 43:return 30;
break;
case 44:return 8;
break;
case 45:return 10;
break;
case 46:return 15;
break;
case 47:return 16;
break;
case 48:return 67;
break;
case 49:return 68;
break;
case 50:return 71;
break;
case 51:return 70;
break;
case 52:return 74;
break;
case 53:return 72;
break;
case 54:return 73;
break;
case 55:return 75;
break;
case 56:return 69;
break;
case 57:return 86;
break;
case 58:return 17;
break;
case 59:return 85;
break;
case 60:return 83;
break;
case 61:return 87;
break;
case 62:return 84;
break;
case 63:return 82;
break;
case 64:return 89;
break;
case 65:return 88;
break;
case 66:return 90;
break;
case 67:return 91;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81;
break;
case 70:return 77;
break;
case 71:return 76;
break;
case 72:return 14;
break;
case 73:return 5;
break;
case 74: 
	//console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
	listaErrores.push({
		tipo:"LEXICO",
		linea:yy_.yylloc.first_line,
		columna:yy_.yylloc.first_column,
		mensaje:'>>ERROR LEXICO: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column
		})
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:typeof\b)/i,/^(?:call\b)/i,/^(?:const\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:new\b)/i,/^(?:tochararray\b)/i,/^(?:indexof\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:graficar_ts\(\);)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'\\''|'([^\']|\\t|\\n|\\\\|\\r|\\")')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GRAMATICA;
exports.Parser = GRAMATICA.Parser;
exports.parse = function () { return GRAMATICA.parse.apply(GRAMATICA, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}