/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,4],$V2=[1,5],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,19],$V9=[1,13],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,17],$Vg=[2,5,7,12,15,18,19,20,21,24,25,27,32,33,34,35,36,37,40,42],$Vh=[2,5,7,11,12,15,18,19,20,21,24,25,27,32,33,34,35,36,37,40,42],$Vi=[2,5,7,8,11,12,15,18,19,20,21,24,25,27,32,33,34,35,36,37,40,42,45,51,52,53,54,55,56,66],$Vj=[1,38],$Vk=[1,45],$Vl=[1,37],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,46],$Vt=[1,48],$Vu=[1,76],$Vv=[1,62],$Vw=[1,61],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[1,71],$VG=[1,72],$VH=[1,73],$VI=[1,74],$VJ=[1,75],$VK=[2,7,10,11,12,15,16,19,20,21,24,25,27,32,33,34,35,36,37,41,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65],$VL=[1,82],$VM=[10,11,29,44],$VN=[2,7,10,11,12,15,16,19,20,21,24,25,27,32,33,34,35,36,37,41,45,46,57,58,59,60,61,62,63,64,65],$VO=[2,7,10,11,12,15,16,19,20,21,24,25,27,32,33,34,35,36,37,41,45,46,47,48,50,57,58,59,60,61,62,63,64,65],$VP=[2,7,10,11,12,15,16,19,20,21,24,25,27,32,33,34,35,36,37,41,63,64,65],$VQ=[2,5,7,11,12,15,18,19,20,21,24,25,27,32,33,34,35,36,37,38,40,42],$VR=[1,136],$VS=[1,137],$VT=[10,29],$VU=[18,40,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PAR_ABRE":8,"expresion":9,"PAR_CIERRA":10,"PTCOMA":11,"PRINTLN":12,"declaracion_asignacion":13,"if":14,"SWITCH":15,"LLAVE_ABRE":16,"casos":17,"LLAVE_CIERRA":18,"WHILE":19,"DO":20,"FOR":21,"asignacion":22,"statement":23,"VOID":24,"IDENTIFICADOR":25,"params":26,"CALL":27,"identificadores":28,"COMA":29,"parametros":30,"tipo":31,"INT":32,"DOUBLE":33,"STRING":34,"CHAR":35,"BOOLEAN":36,"IF":37,"ELSE":38,"caso":39,"CASE":40,"DOSPTS":41,"DEFAULT":42,"declaracion":43,"IGUAL":44,"MENOS":45,"MAS":46,"POR":47,"DIVISION":48,"POTENCIA":49,"MODULO":50,"ENTERO":51,"DECIMAL":52,"TRUE":53,"FALSE":54,"CADENA":55,"CARACTER":56,"MAYOR":57,"MENOR":58,"MAYORIGUAL":59,"MENORIGUAL":60,"IGUALIGUAL":61,"DIFERENTE":62,"AND":63,"OR":64,"XOR":65,"NOT":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PAR_ABRE",10:"PAR_CIERRA",11:"PTCOMA",12:"PRINTLN",15:"SWITCH",16:"LLAVE_ABRE",18:"LLAVE_CIERRA",19:"WHILE",20:"DO",21:"FOR",24:"VOID",25:"IDENTIFICADOR",27:"CALL",29:"COMA",32:"INT",33:"DOUBLE",34:"STRING",35:"CHAR",36:"BOOLEAN",37:"IF",38:"ELSE",40:"CASE",41:"DOSPTS",42:"DEFAULT",44:"IGUAL",45:"MENOS",46:"MAS",47:"POR",48:"DIVISION",49:"POTENCIA",50:"MODULO",51:"ENTERO",52:"DECIMAL",53:"TRUE",54:"FALSE",55:"CADENA",56:"CARACTER",57:"MAYOR",58:"MENOR",59:"MAYORIGUAL",60:"MENORIGUAL",61:"IGUALIGUAL",62:"DIFERENTE",63:"AND",64:"OR",65:"XOR",66:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,1],[6,1],[6,7],[6,7],[6,9],[6,8],[6,4],[6,6],[6,5],[6,1],[28,3],[28,1],[26,3],[26,2],[30,4],[30,2],[31,1],[31,1],[31,1],[31,1],[31,1],[14,3],[14,5],[14,5],[14,4],[14,6],[14,7],[23,3],[23,2],[17,2],[17,1],[39,4],[39,3],[13,1],[13,2],[43,3],[43,5],[22,3],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instrucciones.newPrint($$[$0-2]); 
break;
case 5:
 this.$ = instrucciones.newPrintln($$[$0-2]); 
break;
case 8:
 this.$ = instrucciones.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 9:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 10:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 11:
 this.$ = instrucciones.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 12:
 this.$ = instrucciones.nuevoMetodo($$[$0-2],$$[$0-1],$$[$0]);
break;
case 13:
 this.$ = instrucciones.ejecutarMetodo($$[$0-4],$$[$0-2]);
break;
case 14:
 this.$ = instrucciones.ejecutarMetodo($$[$0-3],[]);
break;
case 15:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 16:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 17:
this.$=[$$[$0]]
break;
case 18: case 33: case 40: case 51:
 this.$ = $$[$0-1]; 
break;
case 19: case 34:
 this.$ = []; 
break;
case 20:
 $$[$0-3].push({tipo:$$[$0-1],identificador:$$[$0]}); this.$=$$[$0-3]; 
break;
case 21:
 this.$ = [{tipo:$$[$0-1],identificador:$$[$0]}]; 
break;
case 22:
 this.$ = 'INT'; 
break;
case 23:
 this.$ = 'DOUBLE'; 
break;
case 24:
 this.$ = 'STRING'; 
break;
case 25:
 this.$ = 'CHAR'; 
break;
case 26:
 this.$ = 'BOOLEAN'; 
break;
case 27:
 this.$ = instrucciones.nuevoIf($$[$0-1], $$[$0]); 
break;
case 28:
 this.$ = instrucciones.nuevoElse($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 29:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 30:
 this.$ = instrucciones.nuevoIf($$[$0-2], $$[$0-1]); 
break;
case 31:
 this.$ = instrucciones.nuevoElse($$[$0-4], $$[$0-3], $$[$0]); 
break;
case 32:
 this.$ = instrucciones.nuevoIfElse($$[$0-5], $$[$0-4], $$[$0-1]); 
break;
case 35:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 36:
 this.$ = instrucciones.nuevoListaCasos($$[$0]);
break;
case 37:
 this.$ = instrucciones.nuevoCaso($$[$0-2],$$[$0]); 
break;
case 38:
 this.$ = instrucciones.nuevoCasoDef($$[$0]); 
break;
case 39:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-1], $$[$0-2]); 
break;
case 42:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-3], $$[$0-1], $$[$0-4]); 
break;
case 43:
 this.$ = instrucciones.nuevaAsignacion($$[$0-2], $$[$0]); 
break;
case 44:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 45:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 46:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 47:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 48:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 49:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 50:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 52:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 53:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 54:
 this.$ = instrucciones.nuevoValor(true, TIPO_VALOR.BOOLEAN); 
break;
case 55:
 this.$ = instrucciones.nuevoValor(false, TIPO_VALOR.BOOLEAN); 
break;
case 56:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 57:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 58:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 59:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 60:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 61:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 62:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 63:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 64:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 65:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 66:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 67:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR); 
break;
case 68:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2,13:6,14:7,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},{1:[3]},{2:$V0,5:[1,25],6:26,7:$V1,12:$V2,13:6,14:7,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},o($Vg,[2,3]),{8:[1,27]},{8:[1,28]},o($Vh,[2,6]),o($Vh,[2,7]),{8:[1,29]},{8:[1,30]},{16:[1,31]},{8:[1,32]},{25:[1,33]},{25:[1,34]},o($Vh,[2,15]),o($Vi,[2,39]),{11:[1,35]},{8:$Vj,9:36,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{25:$Vt,28:47},{44:[1,49]},{25:[2,22]},{25:[2,23]},{25:[2,24]},{25:[2,25]},{25:[2,26]},{1:[2,1]},o($Vg,[2,2]),{8:$Vj,9:50,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:51,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:52,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:53,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{2:$V0,4:54,6:3,7:$V1,12:$V2,13:6,14:7,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},{13:55,22:16,25:$V8,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,43:15},{8:[1,57],26:56},{8:[1,58]},o($Vi,[2,40]),{2:$V0,6:60,7:$V1,12:$V2,13:6,14:7,15:$V3,16:$Vu,19:$V4,20:$V5,21:$V6,22:16,23:59,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{8:$Vj,9:77,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:78,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,58]),{8:$Vj,9:79,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{11:[1,80],29:$VL,44:[1,81]},o($VM,[2,17]),{8:$Vj,9:83,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{10:[1,84],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{10:[1,85],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{10:[1,86],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{10:[1,87],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{2:$V0,6:26,7:$V1,12:$V2,13:6,14:7,15:$V3,18:[1,88],19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},{8:$Vj,9:89,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{16:$Vu,23:90},{10:[1,92],30:91,31:93,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve},{10:[1,95],25:$Vt,28:94},o($Vh,[2,27],{38:[1,96]}),{11:[1,97]},{8:$Vj,9:98,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:99,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:100,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:101,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:102,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:103,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:104,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:105,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:106,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:107,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:108,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:109,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:110,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:111,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{8:$Vj,9:112,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{2:$V0,4:113,6:3,7:$V1,12:$V2,13:6,14:7,15:$V3,18:[1,114],19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},o($VK,[2,44]),{10:[1,115],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},o($VK,[2,68]),o($Vi,[2,41]),{8:$Vj,9:116,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{25:[1,117]},o([10,11],[2,43],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),{11:[1,118]},{11:[1,119]},{16:[1,120]},{16:[1,121]},{19:[1,122]},{11:[1,123],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},o($Vh,[2,12]),{10:[1,124],29:[1,125]},{16:[2,19]},{25:[1,126]},{10:[1,127],29:$VL},{11:[1,128]},{14:129,16:$Vu,23:130,37:$Vf},o($Vh,[2,30],{38:[1,131]}),o($VN,[2,45],{47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VN,[2,46],{47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VO,[2,47],{49:$Vz}),o($VO,[2,48],{49:$Vz}),o($VO,[2,49]),o($VO,[2,50],{49:$Vz}),o($VP,[2,59],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VP,[2,60],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VP,[2,61],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VP,[2,62],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VP,[2,63],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VP,[2,64],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o([2,7,10,11,12,15,16,19,20,21,24,25,27,32,33,34,35,36,37,41,63,64],[2,65],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:$VJ}),o([2,7,10,11,12,15,16,19,20,21,24,25,27,32,33,34,35,36,37,41,64],[2,66],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,65:$VJ}),o($VP,[2,67],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG}),{2:$V0,6:26,7:$V1,12:$V2,13:6,14:7,15:$V3,18:[1,132],19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},o($VQ,[2,34]),o($VK,[2,51]),{11:[1,133],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},o($VM,[2,16]),o($Vh,[2,4]),o($Vh,[2,5]),{17:134,39:135,40:$VR,42:$VS},{2:$V0,4:138,6:3,7:$V1,12:$V2,13:6,14:7,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},{8:[1,139]},{22:140,25:$V8},{16:[2,18]},{31:141,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve},o($VT,[2,21]),{11:[1,142]},o($Vh,[2,14]),o($Vh,[2,28]),o($Vh,[2,29]),{2:$V0,6:144,7:$V1,12:$V2,13:6,14:143,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},o($VQ,[2,33]),o($Vi,[2,42]),{18:[1,145],39:146,40:$VR,42:$VS},o($VU,[2,36]),{8:$Vj,9:147,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{41:[1,148]},{2:$V0,6:26,7:$V1,12:$V2,13:6,14:7,15:$V3,18:[1,149],19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},{8:$Vj,9:150,25:$Vk,45:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,66:$Vs},{10:[1,151]},{25:[1,152]},o($Vh,[2,13]),o($Vh,[2,31]),{11:[1,153]},o($Vh,[2,8]),o($VU,[2,35]),{41:[1,154],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{2:$V0,4:155,6:3,7:$V1,12:$V2,13:6,14:7,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},o($Vh,[2,9]),{10:[1,156],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ},{16:$Vu,23:157},o($VT,[2,20]),o($Vh,[2,32]),{2:$V0,4:158,6:3,7:$V1,12:$V2,13:6,14:7,15:$V3,19:$V4,20:$V5,21:$V6,22:16,24:$V7,25:$V8,27:$V9,31:18,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,43:15},o($VU,[2,38],{13:6,14:7,43:15,22:16,31:18,6:26,2:$V0,7:$V1,12:$V2,15:$V3,19:$V4,20:$V5,21:$V6,24:$V7,25:$V8,27:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf}),{11:[1,159]},o($Vh,[2,11]),o($VU,[2,37],{13:6,14:7,43:15,22:16,31:18,6:26,2:$V0,7:$V1,12:$V2,15:$V3,19:$V4,20:$V5,21:$V6,24:$V7,25:$V8,27:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf}),o($Vh,[2,10])],
defaultActions: {20:[2,22],21:[2,23],22:[2,24],23:[2,25],24:[2,26],25:[2,1],92:[2,19],124:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('../interprete/instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('../interprete/instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('../interprete/tablaSimbolos').TIPO_DATO; 
	const instrucciones	    = require('../interprete/instrucciones').instrucciones;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignora espacios en blanco
break;
case 1:// Comentario de l√≠nea
break;
case 2:// Comentario multil√≠nea
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 36;
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 53;
break;
case 9:return 54;
break;
case 10:return 7;
break;
case 11:return 12;
break;
case 12:return 37;
break;
case 13:return 38;
break;
case 14:return 21;
break;
case 15:return 15;
break;
case 16:return 40;
break;
case 17:return 42;
break;
case 18:return 20;
break;
case 19:return 19;
break;
case 20:return 'BREAK';
break;
case 21:return 'CONTINUE';
break;
case 22:return 'RETURN';
break;
case 23:return 24;
break;
case 24:return 'TYPEOF';
break;
case 25:return 27;
break;
case 26:return 'CONST';
break;
case 27:return 11;
break;
case 28:return 29;
break;
case 29:return 16;
break;
case 30:return 18;
break;
case 31:return 8;
break;
case 32:return 10;
break;
case 33:return 46;
break;
case 34:return 45;
break;
case 35:return 49;
break;
case 36:return 47;
break;
case 37:return 48;
break;
case 38:return 50;
break;
case 39:return 61;
break;
case 40:return 44;
break;
case 41:return 60;
break;
case 42:return 58;
break;
case 43:return 62;
break;
case 44:return 59;
break;
case 45:return 57;
break;
case 46:return 64;
break;
case 47:return 63;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 55; 
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56;
break;
case 52:return 52;
break;
case 53:return 51;
break;
case 54:return 25;
break;
case 55:return 5;
break;
case 56: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:typeof\b)/i,/^(?:call\b)/i,/^(?:const\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'\\''|'([^\']|\\t|\\n|\\\\|\\r|\\")')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}