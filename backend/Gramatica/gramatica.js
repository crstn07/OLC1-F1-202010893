/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[2,61],$V2=[1,4],$V3=[1,39],$V4=[1,5],$V5=[1,35],$V6=[1,9],$V7=[1,32],$V8=[1,10],$V9=[1,11],$Va=[1,12],$Vb=[1,16],$Vc=[1,17],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,34],$Vn=[1,52],$Vo=[1,53],$Vp=[1,38],$Vq=[1,40],$Vr=[1,41],$Vs=[1,42],$Vt=[1,43],$Vu=[1,44],$Vv=[1,45],$Vw=[1,46],$Vx=[1,47],$Vy=[1,48],$Vz=[1,49],$VA=[1,50],$VB=[1,51],$VC=[2,5,7,8,12,14,22,23,25,26,27,28,34,36,45,46,47,48,49,50,53,54,55,56,57,59,62,63,65,71,72,73,74,75,76,86,87,88,89,90,91],$VD=[2,5,7,8,12,14,22,23,25,26,27,28,34,36,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,65,71,72,73,74,75,76,86,87,88,89,90,91],$VE=[1,69],$VF=[1,70],$VG=[1,72],$VH=[14,15],$VI=[1,75],$VJ=[1,84],$VK=[1,86],$VL=[1,85],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,94],$VU=[1,95],$VV=[1,96],$VW=[1,97],$VX=[1,98],$VY=[1,99],$VZ=[2,95],$V_=[1,102],$V$=[1,101],$V01=[1,103],$V11=[1,104],$V21=[11,40,64,65,66,67,68,69,70,77,78,79,80,81,82,83,84,85],$V31=[2,74],$V41=[2,75],$V51=[2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],$V61=[11,17,42],$V71=[2,35],$V81=[1,119],$V91=[1,121],$Va1=[1,127],$Vb1=[11,40],$Vc1=[5,25,51,53,54],$Vd1=[1,158],$Ve1=[10,42],$Vf1=[2,42],$Vg1=[2,81],$Vh1=[2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,71,72,73,74,75,76,86,87,88,89,90,91],$Vi1=[10,11],$Vj1=[2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],$Vk1=[2,83],$Vl1=[2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],$Vm1=[2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91],$Vn1=[1,189],$Vo1=[1,216],$Vp1=[1,220],$Vq1=[1,221],$Vr1=[25,53,54],$Vs1=[16,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PAR_ABRE":8,"expresion":9,"PAR_CIERRA":10,"PTCOMA":11,"PRINTLN":12,"tipo":13,"IDENTIFICADOR":14,"[":15,"]":16,"IGUAL":17,"NEW":18,"vector":19,"declaracion_asignacion":20,"if":21,"SWITCH":22,"LLAVE_ABRE":23,"casos":24,"LLAVE_CIERRA":25,"WHILE":26,"DO":27,"FOR":28,"asignacion":29,"statement":30,"break":31,"continue":32,"return":33,"VOID":34,"params":35,"CALL":36,"parametros_asignar":37,"ternario":38,"instruccion_ternario":39,"DOSPTS":40,"valoresVector":41,"COMA":42,"identificadores":43,"parametros":44,"INT":45,"DOUBLE":46,"STRING":47,"CHAR":48,"BOOLEAN":49,"IF":50,"ELSE":51,"caso":52,"CASE":53,"DEFAULT":54,"BREAK":55,"CONTINUE":56,"RETURN":57,"declaracion":58,"CONST":59,"incremento":60,"decremento":61,"INCREMENTO":62,"DECREMENTO":63,"INTERROGACION":64,"MENOS":65,"MAS":66,"POR":67,"DIVISION":68,"POTENCIA":69,"MODULO":70,"ENTERO":71,"DECIMAL":72,"TRUE":73,"FALSE":74,"CADENA":75,"CARACTER":76,"MAYOR":77,"MENOR":78,"MAYORIGUAL":79,"MENORIGUAL":80,"IGUALIGUAL":81,"DIFERENTE":82,"AND":83,"OR":84,"XOR":85,"NOT":86,"TYPEOF":87,"TOLOWER":88,"TOUPPER":89,"ROUND":90,"LENGTH":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PAR_ABRE",10:"PAR_CIERRA",11:"PTCOMA",12:"PRINTLN",14:"IDENTIFICADOR",15:"[",16:"]",17:"IGUAL",18:"NEW",22:"SWITCH",23:"LLAVE_ABRE",25:"LLAVE_CIERRA",26:"WHILE",27:"DO",28:"FOR",34:"VOID",36:"CALL",40:"DOSPTS",42:"COMA",45:"INT",46:"DOUBLE",47:"STRING",48:"CHAR",49:"BOOLEAN",50:"IF",51:"ELSE",53:"CASE",54:"DEFAULT",55:"BREAK",56:"CONTINUE",57:"RETURN",59:"CONST",62:"INCREMENTO",63:"DECREMENTO",64:"INTERROGACION",65:"MENOS",66:"MAS",67:"POR",68:"DIVISION",69:"POTENCIA",70:"MODULO",71:"ENTERO",72:"DECIMAL",73:"TRUE",74:"FALSE",75:"CADENA",76:"CARACTER",77:"MAYOR",78:"MENOR",79:"MAYORIGUAL",80:"MENORIGUAL",81:"IGUALIGUAL",82:"DIFERENTE",83:"AND",84:"OR",85:"XOR",86:"NOT",87:"TYPEOF",88:"TOLOWER",89:"TOUPPER",90:"ROUND",91:"LENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,16],[6,11],[6,9],[6,7],[6,2],[6,1],[6,7],[6,7],[6,9],[6,9],[6,1],[6,1],[6,1],[6,4],[6,4],[6,6],[6,1],[6,5],[6,1],[19,3],[41,3],[41,3],[41,1],[41,1],[39,4],[39,4],[39,1],[39,5],[43,3],[43,1],[35,3],[35,2],[44,4],[44,2],[37,3],[37,1],[37,0],[13,1],[13,1],[13,1],[13,1],[13,1],[21,3],[21,5],[21,5],[21,3],[21,5],[21,5],[30,3],[30,2],[24,2],[24,1],[52,4],[52,3],[31,2],[31,0],[32,2],[32,0],[33,2],[33,3],[33,0],[20,1],[20,1],[58,2],[58,4],[58,3],[58,5],[29,3],[29,1],[29,1],[60,2],[60,2],[61,2],[61,2],[38,2],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,4],[9,1],[9,1],[9,4],[9,4],[9,2],[9,2],[9,2],[9,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 28: case 29: case 41:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instrucciones.nuevoPrint($$[$0-2]); 
break;
case 5:
 this.$ = instrucciones.nuevoPrintln($$[$0-2]); 
break;
case 6:
 this.$ = instrucciones.nuevoVector($$[$0-15],$$[$0-14],$$[$0-7],$$[$0-5],$$[$0-2]); 
break;
case 7:
 this.$ = instrucciones.nuevoVector($$[$0-10],$$[$0-9],$$[$0-4],$$[$0-2]); 
break;
case 8:
 this.$ = instrucciones.nuevoVector($$[$0-8],$$[$0-7],undefined,$$[$0-1],undefined); 
break;
case 9:
 this.$ = instrucciones.nuevoVector($$[$0-6],$$[$0-5],undefined,$$[$0-1]); 
break;
case 12:
 this.$ = instrucciones.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 13:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 14:
 this.$ = instrucciones.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 15:
 this.$ = instrucciones.nuevoFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 19:
 this.$ = instrucciones.nuevoMetodo("VOID",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 20:
 this.$ = instrucciones.nuevoMetodo($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 21:
 this.$ = instrucciones.ejecutarMetodo($$[$0-4],$$[$0-2]);
break;
case 22:
 this.$ = instrucciones.nuevoBloque($$[$0]); 
break;
case 23:
 this.$ = instrucciones.nuevoTernarioIns($$[$0-4],[$$[$0-3]],[$$[$0-1]]); 
break;
case 24:
  console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			listaErrores.push({
				tipo: "SINTACTICO",
				linea: this._$.first_line,
				columna: this._$.first_column,
				mensaje: '>>ERROR SINTACTICO: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column
			});
	
break;
case 25:
 this.$ = $$[$0-1];
break;
case 26: case 27:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 30:
 this.$ = instrucciones.nuevoPrint($$[$0-1]); 
break;
case 31:
 this.$ = instrucciones.nuevoPrintln($$[$0-1]); 
break;
case 32: case 67: case 68: case 74: case 75: case 107: case 108:
 this.$ = $$[$0]; 
break;
case 33: case 109:
 this.$ = instrucciones.ejecutarMetodo($$[$0-3],$$[$0-1]);
break;
case 34:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 35:
this.$=[$$[$0]]
break;
case 36: case 54: case 80: case 88:
 this.$ = $$[$0-1]; 
break;
case 37: case 42: case 55:
 this.$ = []; 
break;
case 38:
 $$[$0-3].push({tipo:$$[$0-1],identificador:$$[$0]}); this.$=$$[$0-3]; 
break;
case 39:
 this.$ = [{tipo:$$[$0-1],identificador:$$[$0]}]; 
break;
case 40:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 43:
 this.$ = 'INT'; 
break;
case 44:
 this.$ = 'DOUBLE'; 
break;
case 45:
 this.$ = 'STRING'; 
break;
case 46:
 this.$ = 'CHAR'; 
break;
case 47:
 this.$ = 'BOOLEAN'; 
break;
case 48:
 this.$ = instrucciones.nuevoIf($$[$0-1], $$[$0]); 
break;
case 49:
 this.$ = instrucciones.nuevoElseIf($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 50:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 51:
 this.$ = instrucciones.nuevoIf($$[$0-1], [$$[$0]]); 
break;
case 52:
 this.$ = instrucciones.nuevoElseIf($$[$0-3], [$$[$0-2]], $$[$0]); 
break;
case 53:
 this.$ = instrucciones.nuevoIfElse($$[$0-3], [$$[$0-2]], [$$[$0]]); 
break;
case 56:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 57:
 this.$ = instrucciones.nuevoListaCasos($$[$0]);
break;
case 58:
 this.$ = instrucciones.nuevoCaso($$[$0-2],$$[$0]); 
break;
case 59:
 this.$ = instrucciones.nuevoCasoDef($$[$0]); 
break;
case 60:
 this.$ = instrucciones.nuevoBreak()
break;
case 62:
 this.$ = instrucciones.nuevoContinue()
break;
case 64:
 this.$ = instrucciones.nuevoReturn(); 
break;
case 65:
 this.$ = instrucciones.nuevoReturn($$[$0-1]); 
break;
case 69:
 this.$ = instrucciones.nuevaDeclaracion($$[$0], $$[$0-1], TIPO_VARIABLE.VARIABLE); 
break;
case 70:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-2], $$[$0], $$[$0-3], TIPO_VARIABLE.VARIABLE); 
break;
case 71:
 this.$ = instrucciones.nuevaDeclaracion($$[$0], $$[$0-1], TIPO_VARIABLE.CONSTANTE); 
break;
case 72:
 this.$ = instrucciones.nuevaDeclaracionAsignacion($$[$0-2], $$[$0], $$[$0-3], TIPO_VARIABLE.CONSTANTE); 
break;
case 73:
 this.$ = instrucciones.nuevaAsignacion($$[$0-2], $$[$0]); 
break;
case 76:
 this.$ = instrucciones.nuevoIncrementoPost($$[$0-1]);
break;
case 77:
 this.$ = instrucciones.nuevoIncrementoPre($$[$0]);
break;
case 78:
 this.$ = instrucciones.nuevoDecrementoPost($$[$0-1]);
break;
case 79:
 this.$ = instrucciones.nuevoDecrementoPre($$[$0]);
break;
case 81:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 82:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 83:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 84:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 85:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 86:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 87:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 89:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO); 
break;
case 90:
 this.$ = instrucciones.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 91:
 this.$ = instrucciones.nuevoValor(true, TIPO_VALOR.BOOLEAN); 
break;
case 92:
 this.$ = instrucciones.nuevoValor(false, TIPO_VALOR.BOOLEAN); 
break;
case 93:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 94:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 95:
 this.$ = instrucciones.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 96:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 97:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 98:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 99:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 100:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 101:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE); 
break;
case 102:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 103:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 104:
 this.$ = instrucciones.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR); 
break;
case 105:
 this.$ = instrucciones.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 106:
 this.$ = instrucciones.nuevoTypeof($$[$0-1]); 
break;
case 110:
 this.$ = instrucciones.nuevoTernarioExp($$[$0-3],$$[$0-2],$$[$0]); 
break;
case 111:
 this.$ = instrucciones.nuevoToLower($$[$0]); 
break;
case 112:
 this.$ = instrucciones.nuevoToUpper($$[$0]); 
break;
case 113:
 this.$ = instrucciones.nuevoRound($$[$0]); 
break;
case 114:
 this.$ = instrucciones.nuevoLength($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{1:[3]},{2:$V0,5:[1,54],6:55,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($VC,[2,3]),{8:[1,56]},{8:[1,57]},{14:[1,58],43:59},{11:[1,60]},o($VD,[2,11]),{8:[1,61]},{8:[1,62]},{23:[1,63]},{8:[1,64]},o($VD,[2,16]),o($VD,[2,17]),o($VD,[2,18]),{14:[1,65]},{14:[1,66]},o($VD,[2,22]),{7:$VE,8:$V3,9:68,12:$VF,14:$V5,29:71,36:$VG,38:73,39:67,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($VD,[2,24]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),{11:[2,67]},{11:[2,68]},{8:$V3,9:74,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{11:[1,78]},{11:[1,79]},{8:$V3,9:81,11:[1,80],14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{2:$V0,4:82,6:3,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,25:[1,83],26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{13:100,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o([40,64,65,66,67,68,69,70,77,78,79,80,81,82,83,84,85],$VZ,{8:$V_,17:$V$,62:$V01,63:$V11}),o($V21,$V31),o($V21,$V41),{8:$V3,9:105,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:106,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($V51,[2,89]),o($V51,[2,90]),o($V51,[2,91]),o($V51,[2,92]),o($V51,[2,93]),o($V51,[2,94]),{8:$V3,9:107,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:[1,108]},{8:$V3,9:109,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:110,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:111,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:112,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{14:[1,113]},{14:[1,114]},{1:[2,1]},o($VC,[2,2]),{8:$V3,9:115,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:116,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($V61,$V71,{35:118,8:$V81,15:[1,117]}),{11:[2,69],17:[1,120],42:$V91},o($VD,[2,10]),{8:$V3,9:122,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:123,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{2:$V0,4:124,6:3,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,25:$V1,26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{13:126,14:$Va1,20:125,29:27,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,58:26,59:$Vm,60:128,61:129,62:$Vn,63:$Vo},{8:$V81,35:130},{8:[1,131]},{40:[1,132]},{40:[1,133],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{8:[1,134]},{8:[1,135]},o($Vb1,[2,32]),{14:[1,136]},{8:$V3,9:68,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($Vc1,$V1,{13:6,20:7,21:8,31:13,32:14,33:15,38:19,58:26,29:27,9:33,60:36,61:37,30:137,6:138,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,34:$Vb,36:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,59:$Vm,62:$Vn,63:$Vo,64:$VJ,65:[1,139],66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o([2,5,7,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],$VZ,{8:$V_,62:$V01,63:$V11}),o($V51,[2,107]),o($V51,[2,108]),o($VD,[2,60]),o($VD,[2,62]),o($VD,[2,64]),{11:[1,140],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{2:$V0,6:55,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,25:[1,141],26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($VD,[2,55]),o([7,8,12,14,36,62,63,65,71,72,73,74,75,76,86,87,88,89,90,91],[2,80]),{8:$V3,9:142,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:143,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:144,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:145,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:146,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:147,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:148,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:149,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:150,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:151,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:152,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:153,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:154,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:155,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:156,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{14:$Vd1,43:157},{8:$V3,9:159,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($Ve1,$Vf1,{38:73,60:76,61:77,37:160,9:161,8:$V3,14:$VI,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($V51,[2,76]),o($V51,[2,78]),o($V51,$Vg1),{10:[1,162],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($V51,[2,105]),{8:$V3,9:163,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($Vh1,[2,111],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($Vh1,[2,112],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($Vh1,[2,113],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($Vh1,[2,114],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($V51,[2,77]),o($V51,[2,79]),{10:[1,164],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{10:[1,165],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{16:[1,166]},{23:$V7,30:167},{10:[1,169],13:170,44:168,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{8:$V3,9:171,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{14:[1,172]},{10:[1,173],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{10:[1,174],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{2:$V0,6:55,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,25:[1,175],26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{11:[1,176]},{14:$Vd1,43:59},{17:$V$,62:$V01,63:$V11},o($Vi1,$V31),o($Vi1,$V41),{23:$V7,30:177},o($Ve1,$Vf1,{38:73,60:76,61:77,9:161,37:178,8:$V3,14:$VI,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),{7:$VE,12:$VF,14:$Va1,29:71,36:$VG,39:179,60:128,61:129,62:$Vn,63:$Vo},{8:$V3,9:180,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:181,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:182,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:[1,183]},o($VC,[2,48],{51:[1,184]}),o($VC,[2,51],{51:[1,185]}),{8:$V3,9:186,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($VD,[2,65]),o($VD,[2,54]),o($Vj1,[2,82],{67:$VM,68:$VN,69:$VO,70:$VP}),o($Vj1,$Vk1,{67:$VM,68:$VN,69:$VO,70:$VP}),o($Vl1,[2,84],{69:$VO}),o($Vl1,[2,85],{69:$VO}),o($Vl1,[2,86]),o($Vl1,[2,87],{69:$VO}),o($Vm1,[2,96],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($Vm1,[2,97],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($Vm1,[2,98],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($Vm1,[2,99],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($Vm1,[2,100],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($Vm1,[2,101],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o([2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,71,72,73,74,75,76,83,84,86,87,88,89,90,91],[2,102],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,85:$VY}),o([2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,71,72,73,74,75,76,84,86,87,88,89,90,91],[2,103],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,85:$VY}),o($Vm1,[2,104],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV}),{11:[2,71],17:[1,187],42:$V91},o($V61,$V71),o([10,11,40],[2,73],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),{10:[1,188],42:$Vn1},o($Ve1,[2,41],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($V51,[2,88]),{10:[1,190],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{11:[1,191]},{11:[1,192]},{15:[1,193],17:[1,194]},o($VD,[2,20]),{10:[1,195],42:[1,196]},{23:[2,37]},{14:[1,197]},{11:[2,70],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($V61,[2,34]),{23:[1,198]},{23:[1,199]},{26:[1,200]},{8:$V3,9:201,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($VD,[2,19]),{10:[1,202],42:$Vn1},{11:[1,203]},o([2,5,7,8,10,11,12,14,16,22,23,25,26,27,28,34,36,40,42,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,71,72,73,74,75,76,86,87,88,89,90,91],[2,110],{65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),{10:[1,204],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{10:[1,205],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($Ve1,$Vf1,{38:73,60:76,61:77,9:161,37:206,8:$V3,14:$VI,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),{21:207,23:$V7,30:208,50:$Vi},o($Vc1,$V1,{13:6,20:7,31:13,32:14,33:15,30:18,38:19,58:26,29:27,9:33,60:36,61:37,21:209,6:210,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,34:$Vb,36:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,59:$Vm,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o([2,5,7,8,12,14,22,23,25,26,27,28,34,36,45,46,47,48,49,50,51,53,54,55,56,57,59,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],$Vk1,{67:$Vg1,68:$Vg1,69:$Vg1,70:$Vg1}),{8:$V3,9:211,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($V51,[2,109]),{8:$V3,9:212,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($V51,[2,106]),o($VD,[2,4]),o($VD,[2,5]),{16:[1,213]},{15:$Vo1,18:[1,214],19:215},{23:[2,36]},{13:217,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},o($Ve1,[2,39]),{24:218,52:219,53:$Vp1,54:$Vq1},{2:$V0,4:222,6:3,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,25:$V1,26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:[1,223]},{11:[1,224],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{11:[1,225]},o($VD,[2,23]),o($Vb1,[2,30]),o($Vb1,[2,31]),{10:[1,226],42:$Vn1},o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,52]),o($VD,[2,53]),{11:[2,72],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($Ve1,[2,40],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),{17:[1,227]},{13:228,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{11:[1,229]},{8:$V3,9:231,14:$VI,15:$Vo1,19:232,38:73,41:230,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{14:[1,233]},{25:[1,234],52:235,53:$Vp1,54:$Vq1},o($Vr1,[2,57]),{8:$V3,9:236,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{40:[1,237]},{2:$V0,6:55,7:$V2,8:$V3,9:33,12:$V4,13:6,14:$V5,20:7,21:8,22:$V6,23:$V7,25:[1,238],26:$V8,27:$V9,28:$Va,29:27,30:18,31:13,32:14,33:15,34:$Vb,36:$Vc,38:19,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,58:26,59:$Vm,60:36,61:37,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{8:$V3,9:239,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{14:$Va1,29:240,60:128,61:129,62:$Vn,63:$Vo},o($VD,[2,21]),o($Vb1,[2,33]),{15:$Vo1,18:[1,241],19:242},{15:[1,243]},o($VD,[2,9]),{16:[1,244],42:[1,245]},o($Vs1,[2,28],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($Vs1,[2,29]),o($Ve1,[2,38]),o($VD,[2,12]),o($Vr1,[2,56]),{40:[1,246],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($Vr1,$V1,{6:3,13:6,20:7,21:8,31:13,32:14,33:15,30:18,38:19,58:26,29:27,9:33,60:36,61:37,4:247,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,34:$Vb,36:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,59:$Vm,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($VD,[2,13]),{10:[1,248],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{10:[1,249]},{13:250,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh},{11:[1,251]},{8:$V3,9:252,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o([11,16,42],[2,25]),{8:$V3,9:253,14:$VI,15:$Vo1,19:254,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},o($Vr1,$V1,{6:3,13:6,20:7,21:8,31:13,32:14,33:15,30:18,38:19,58:26,29:27,9:33,60:36,61:37,4:255,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,34:$Vb,36:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,59:$Vm,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($Vr1,[2,59],{13:6,20:7,21:8,31:13,32:14,33:15,30:18,38:19,58:26,29:27,9:33,60:36,61:37,6:55,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,34:$Vb,36:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,59:$Vm,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),{11:[1,256]},{23:$V7,30:257},{15:[1,258]},o($VD,[2,8]),{16:[1,259],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($Vs1,[2,26],{64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY}),o($Vs1,[2,27]),o($Vr1,[2,58],{13:6,20:7,21:8,31:13,32:14,33:15,30:18,38:19,58:26,29:27,9:33,60:36,61:37,6:55,2:$V0,7:$V2,8:$V3,12:$V4,14:$V5,22:$V6,23:$V7,26:$V8,27:$V9,28:$Va,34:$Vb,36:$Vc,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,55:$Vj,56:$Vk,57:$Vl,59:$Vm,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($VD,[2,14]),o($VD,[2,15]),{8:$V3,9:260,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{11:[1,261]},{16:[1,262],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},o($VD,[2,7]),{15:[1,263]},{8:$V3,9:264,14:$VI,38:73,60:76,61:77,62:$Vn,63:$Vo,65:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB},{16:[1,265],64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY},{11:[1,266]},o($VD,[2,6])],
defaultActions: {26:[2,67],27:[2,68],54:[2,1],169:[2,37],195:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('../interprete/instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('../interprete/instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('../interprete/tablaSimbolos').TIPO_DATO; 
	const TIPO_VARIABLE		= require('../interprete/tablaSimbolos').TIPO_VARIABLE; 
	const instrucciones	    = require('../interprete/instrucciones').instrucciones;
	var listaErrores 		= require('../interprete/instrucciones').listaErrores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignora espacios en blanco
break;
case 1:// Comentario de lÃ­nea
break;
case 2:// Comentario multilÃ­nea
break;
case 3:return 45;
break;
case 4:return 46;
break;
case 5:return 49;
break;
case 6:return 47;
break;
case 7:return 48;
break;
case 8:return 73;
break;
case 9:return 74;
break;
case 10:return 7;
break;
case 11:return 12;
break;
case 12:return 50;
break;
case 13:return 51;
break;
case 14:return 28;
break;
case 15:return 22;
break;
case 16:return 53;
break;
case 17:return 54;
break;
case 18:return 27;
break;
case 19:return 26;
break;
case 20:return 55;
break;
case 21:return 56;
break;
case 22:return 57;
break;
case 23:return 34;
break;
case 24:return 87;
break;
case 25:return 36;
break;
case 26:return 59;
break;
case 27:return 88;
break;
case 28:return 89;
break;
case 29:return 90;
break;
case 30:return 91;
break;
case 31:return 18;
break;
case 32:return 40;
break;
case 33:return 11;
break;
case 34:return 42;
break;
case 35:return 23;
break;
case 36:return 25;
break;
case 37:return 8;
break;
case 38:return 10;
break;
case 39:return 15;
break;
case 40:return 16;
break;
case 41:return 62;
break;
case 42:return 63;
break;
case 43:return 66;
break;
case 44:return 65;
break;
case 45:return 69;
break;
case 46:return 67;
break;
case 47:return 68;
break;
case 48:return 70;
break;
case 49:return 64;
break;
case 50:return 81;
break;
case 51:return 17;
break;
case 52:return 80;
break;
case 53:return 78;
break;
case 54:return 82;
break;
case 55:return 79;
break;
case 56:return 77;
break;
case 57:return 84;
break;
case 58:return 83;
break;
case 59:return 85;
break;
case 60:return 86;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 76;
break;
case 63:return 72;
break;
case 64:return 71;
break;
case 65:return 14;
break;
case 66:return 5;
break;
case 67: 
	//console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
	listaErrores.push({
		tipo:"LEXICO",
		linea:yy_.yylloc.first_line,
		columna:yy_.yylloc.first_column,
		mensaje:'>>ERROR LEXICO: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column
		})
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:typeof\b)/i,/^(?:call\b)/i,/^(?:const\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:new\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'\\''|'([^\']|\\t|\\n|\\\\|\\r|\\")')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}